
function Multibit_config(this_block)

Wa = 16;
Da = 0;
K = 6;

  % Revision History:
  %
  %   19-Oct-2023  (08:49 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     H:\CSSE4010\project\AA6_Multibit.vhd
  %
  %
  
  out_str = sprintf('Fix_%d_%d', (Wa+Da), Da);
  width_str = sprintf('%d', (Wa+Da));
  approx_str = sprintf('%d', K);

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('Multibit');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('A');
  this_block.addSimulinkInport('B');

  this_block.addSimulinkOutport('Sum');
  sum_port = this_block.port('Sum');
  sum_port.setType(out_str);


  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.
    
%     if (this_block.port('A').width ~= (32))
%         this_block.setError('Input data type for port "A" must have width = 10');
%     end
%     
%     if (this_block.port('B').width ~= (32))
%         this_block.setError('Input data type for port "B" must have width = 10');
%     end

    % (!) Port 'A' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

    % (!) Port 'B' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

  % (!) Port 'Sum' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  end  % if(inputTypesKnown)
  % -----------------------------

  % System Generator found no apparent clock signals in the HDL, assuming combinational logic.
  % -----------------------------
   if (this_block.inputRatesKnown)
     inputRates = this_block.inputRates; 
     uniqueInputRates = unique(inputRates); 
     outputRate = uniqueInputRates(1);
     for i = 2:length(uniqueInputRates)
       if (uniqueInputRates(i) ~= Inf)
         outputRate = gcd(outputRate,uniqueInputRates(i));
       end
     end  % for(i)
     for i = 1:this_block.numSimulinkOutports 
       this_block.outport(i).setRate(outputRate); 
     end  % for(i)
   end  % if(inputRatesKnown)
  % -----------------------------

    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('bitWidth','integer',width_str);
  this_block.addGeneric('approxBits','integer',approx_str);

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('AdderAccurateOneBit.vhd');
  this_block.addFile('AA6.vhd');
  this_block.addFile('AA6_Multibit.vhd');

return;


